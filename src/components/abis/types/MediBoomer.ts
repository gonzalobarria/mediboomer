/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MediBoomer {
  export type IntakeTimeStruct = { id: BigNumberish; time: string };

  export type IntakeTimeStructOutput = [id: bigint, time: string] & {
    id: bigint;
    time: string;
  };

  export type PrescriptionStruct = {
    id: BigNumberish;
    medicineId: BigNumberish;
    dose: string;
    isDelivered: boolean;
    timeDelivered: BigNumberish;
    duration: BigNumberish;
    intakeTimeList: MediBoomer.IntakeTimeStruct[];
  };

  export type PrescriptionStructOutput = [
    id: bigint,
    medicineId: bigint,
    dose: string,
    isDelivered: boolean,
    timeDelivered: bigint,
    duration: bigint,
    intakeTimeList: MediBoomer.IntakeTimeStructOutput[]
  ] & {
    id: bigint;
    medicineId: bigint;
    dose: string;
    isDelivered: boolean;
    timeDelivered: bigint;
    duration: bigint;
    intakeTimeList: MediBoomer.IntakeTimeStructOutput[];
  };

  export type MedicalRecipeStruct = {
    id: BigNumberish;
    patient: AddressLike;
    prescriptions: BigNumberish[];
    status: BigNumberish;
  };

  export type MedicalRecipeStructOutput = [
    id: bigint,
    patient: string,
    prescriptions: bigint[],
    status: bigint
  ] & { id: bigint; patient: string; prescriptions: bigint[]; status: bigint };

  export type MedicineStruct = {
    id: BigNumberish;
    name: string;
    wamId: BigNumberish;
  };

  export type MedicineStructOutput = [
    id: bigint,
    name: string,
    wamId: bigint
  ] & { id: bigint; name: string; wamId: bigint };

  export type UserStruct = {
    id: string;
    name: string;
    email: string;
    contractAddress: AddressLike;
    userRole: BigNumberish;
    isExists: boolean;
  };

  export type UserStructOutput = [
    id: string,
    name: string,
    email: string,
    contractAddress: string,
    userRole: bigint,
    isExists: boolean
  ] & {
    id: string;
    name: string;
    email: string;
    contractAddress: string;
    userRole: bigint;
    isExists: boolean;
  };

  export type WaysAdministeringMedicinesStruct = {
    id: BigNumberish;
    name: string;
  };

  export type WaysAdministeringMedicinesStructOutput = [
    id: bigint,
    name: string
  ] & { id: bigint; name: string };
}

export interface MediBoomerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "DOCTOR_ROLE"
      | "PATIENT_ROLE"
      | "PHARMACIST_ROLE"
      | "addIntakeTime"
      | "addMedicalRecipe"
      | "addMedicine"
      | "addUser"
      | "addWaysAdministeringMedicines"
      | "checkUpkeep"
      | "counter"
      | "getIntakeTimeList"
      | "getMedicalRecipe"
      | "getMedicineList"
      | "getPatientList"
      | "getPatientMedicalRecipeList"
      | "getRoleAdmin"
      | "getWamList"
      | "grantRole"
      | "hasRole"
      | "interval"
      | "lastTimeStamp"
      | "owner"
      | "performUpkeep"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "WamAdded"
      | "WamsListed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOCTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PATIENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHARMACIST_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addIntakeTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMedicalRecipe",
    values: [AddressLike, MediBoomer.PrescriptionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addMedicine",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addUser",
    values: [string, string, string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWaysAdministeringMedicines",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIntakeTimeList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMedicalRecipe",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMedicineList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientMedicalRecipeList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWamList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "interval", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOCTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PATIENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHARMACIST_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIntakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMedicalRecipe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMedicine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWaysAdministeringMedicines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIntakeTimeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMedicalRecipe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMedicineList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientMedicalRecipeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWamList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WamAddedEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WamsListedEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MediBoomer extends BaseContract {
  connect(runner?: ContractRunner | null): MediBoomer;
  waitForDeployment(): Promise<this>;

  interface: MediBoomerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DOCTOR_ROLE: TypedContractMethod<[], [string], "view">;

  PATIENT_ROLE: TypedContractMethod<[], [string], "view">;

  PHARMACIST_ROLE: TypedContractMethod<[], [string], "view">;

  addIntakeTime: TypedContractMethod<[_time: string], [void], "nonpayable">;

  addMedicalRecipe: TypedContractMethod<
    [_patient: AddressLike, _prescriptionList: MediBoomer.PrescriptionStruct[]],
    [void],
    "nonpayable"
  >;

  addMedicine: TypedContractMethod<
    [_name: string, _wamId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addUser: TypedContractMethod<
    [
      _id: string,
      _name: string,
      _email: string,
      _contractAddress: AddressLike,
      _userRole: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addWaysAdministeringMedicines: TypedContractMethod<
    [_name: string],
    [void],
    "nonpayable"
  >;

  checkUpkeep: TypedContractMethod<
    [checkData: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  counter: TypedContractMethod<[], [bigint], "view">;

  getIntakeTimeList: TypedContractMethod<
    [],
    [MediBoomer.IntakeTimeStructOutput[]],
    "view"
  >;

  getMedicalRecipe: TypedContractMethod<
    [_address: AddressLike, _medicalRecipeId: BigNumberish],
    [MediBoomer.MedicalRecipeStructOutput],
    "view"
  >;

  getMedicineList: TypedContractMethod<
    [],
    [MediBoomer.MedicineStructOutput[]],
    "view"
  >;

  getPatientList: TypedContractMethod<
    [],
    [MediBoomer.UserStructOutput[]],
    "view"
  >;

  getPatientMedicalRecipeList: TypedContractMethod<
    [_address: AddressLike],
    [MediBoomer.MedicalRecipeStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getWamList: TypedContractMethod<
    [],
    [MediBoomer.WaysAdministeringMedicinesStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  interval: TypedContractMethod<[], [bigint], "view">;

  lastTimeStamp: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOCTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PATIENT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PHARMACIST_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addIntakeTime"
  ): TypedContractMethod<[_time: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addMedicalRecipe"
  ): TypedContractMethod<
    [_patient: AddressLike, _prescriptionList: MediBoomer.PrescriptionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addMedicine"
  ): TypedContractMethod<
    [_name: string, _wamId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addUser"
  ): TypedContractMethod<
    [
      _id: string,
      _name: string,
      _email: string,
      _contractAddress: AddressLike,
      _userRole: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addWaysAdministeringMedicines"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [checkData: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "counter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIntakeTimeList"
  ): TypedContractMethod<[], [MediBoomer.IntakeTimeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMedicalRecipe"
  ): TypedContractMethod<
    [_address: AddressLike, _medicalRecipeId: BigNumberish],
    [MediBoomer.MedicalRecipeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMedicineList"
  ): TypedContractMethod<[], [MediBoomer.MedicineStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPatientList"
  ): TypedContractMethod<[], [MediBoomer.UserStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPatientMedicalRecipeList"
  ): TypedContractMethod<
    [_address: AddressLike],
    [MediBoomer.MedicalRecipeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWamList"
  ): TypedContractMethod<
    [],
    [MediBoomer.WaysAdministeringMedicinesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "interval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTimeStamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "WamAdded"
  ): TypedContractEvent<
    WamAddedEvent.InputTuple,
    WamAddedEvent.OutputTuple,
    WamAddedEvent.OutputObject
  >;
  getEvent(
    key: "WamsListed"
  ): TypedContractEvent<
    WamsListedEvent.InputTuple,
    WamsListedEvent.OutputTuple,
    WamsListedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "WamAdded(address)": TypedContractEvent<
      WamAddedEvent.InputTuple,
      WamAddedEvent.OutputTuple,
      WamAddedEvent.OutputObject
    >;
    WamAdded: TypedContractEvent<
      WamAddedEvent.InputTuple,
      WamAddedEvent.OutputTuple,
      WamAddedEvent.OutputObject
    >;

    "WamsListed(address)": TypedContractEvent<
      WamsListedEvent.InputTuple,
      WamsListedEvent.OutputTuple,
      WamsListedEvent.OutputObject
    >;
    WamsListed: TypedContractEvent<
      WamsListedEvent.InputTuple,
      WamsListedEvent.OutputTuple,
      WamsListedEvent.OutputObject
    >;
  };
}
